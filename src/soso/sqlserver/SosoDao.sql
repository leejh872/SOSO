select * from post
--20161025
INSERT INTO [USER](CELLPHONE, EMAIL, PW, GENDER) VALUES('010-1111-8888', 'delete@naver.com', '1111', 0);

-- ALTER TABLE 테이블명 ADD CONSTRAINT 새디폴트제약명 DEFAULT 0 FOR 해당컬럼;
ALTER TABLE [USER] ADD CONSTRAINT [uregdate] default getdate() FOR REGDATE;
ALTER TABLE [USER] ADD CONSTRAINT [uwarnning] default 0 FOR WARNING;
ALTER TABLE [POST] ADD CONSTRAINT [pregdate] default getdate() FOR REGDATE;
--ALTER TABLE [POST] ADD CONSTRAINT [plike] default (SELECT SUM(IS_LIKE) FROM [LIKE] GROUP BY POST_CODE) FOR [COUNT_LIKE];
ALTER TABLE [POST] ADD CONSTRAINT [phit] default 0 FOR HIT;
ALTER TABLE [POST] ADD CONSTRAINT [ptempdel] default 0 FOR TEMP_DEL;
ALTER TABLE [POST] ADD CONSTRAINT ctempdel CHECK (TEMP_DEL BETWEEN 0 AND 1);
ALTER TABLE [POST] ADD CONSTRAINT [pctempdel] CHECK (TEMP_DEL BETWEEN 0 AND 1);
ALTER TABLE [COMMENT] ADD CONSTRAINT [cregdate] default getdate() FOR REGDATE;
ALTER TABLE [TAG] ADD CONSTRAINT tcodede default 1 FOR CODE;
--ALTER TABLE [TAG] ADD CONSTRAINT tcodech CHECK (CODE BETWEEN 1 AND 7);
ALTER TABLE [LIKE] ADD CONSTRAINT [dislike] default 0 FOR [IS_LIKE];
ALTER TABLE [LIKE] ADD CONSTRAINT cislike CHECK (IS_LIKE BETWEEN 0 AND 1);

ALTER TABLE POST ADD CONSTRAINT dpost FOREIGN KEY (mID) REFERENCES daddy(mID) ON DELETE CASCADE

EXEC sp_helpconstraint [tag];
--ALTER TABLE 테이블명 DROP CONSTRAINT 제약조건명;
ALTER TABLE [TAG] DROP CONSTRAINT tcodech

SELECT * FROM [USER];
SELECT * FROM POST; 
SELECT * FROM PHOTOFILE;
SELECT * FROM [COMMENT];
SELECT * FROM TAG;
SELECT * FROM [ADMIN];
SELECT * FROM [LIKE];
SELECT * FROM USER_COMMENT_VIEW;
SELECT * FROM POST_LIKE_VIEW;

DROP VIEW USER_COMMENT_VIEW;
DROP VIEW POST_LIKE_VIEW

DELETE FROM [USER];
DELETE FROM POST;
DELETE FROM COMMENT;
DELETE FROM TAG;
DELETE FROM [LIKE];

commit;

DROP TABLE [USER];
DROP TABLE POST; 
DROP TABLE COMMENT;
DROP TABLE TAG;
DROP TABLE PHOTOFILES;
DROP TABLE [ADMIN];




-- INSERT INTO [테이블명] ([컬럼명]) VALUES ([값]) 
INSERT INTO [USER](CELLPHONE, EMAIL, PW, GENDER) VALUES('010-1111-8888', 'delete@naver.com', '1111', 'M');
INSERT INTO [USER](CELLPHONE, EMAIL, PW, GENDER) VALUES('010-1234-5678', 'test@naver.com', '1234', 'W');
INSERT INTO POST(STORY, EMAIL, CODE) VALUES('시험보고 운동장에 나왔는데,날씨가 너무 좋다.운동장이 그냥 모랫바닥이었다면 더 꿀꿀했을 텐데 다행!', 'test@naver.com', 1);
INSERT INTO POST(STORY, EMAIL, CODE) VALUES('히히히히히히ㅣ히히히ㅣ히히히히', 'test@naver.com', 2);
INSERT INTO POST(STORY, EMAIL, CODE) VALUES('hohohohoho', 'delete@naver.com', 3);
INSERT INTO POST(STORY, EMAIL, CODE) VALUES('테스트용', 'test@naver.com', 4);
INSERT INTO POST(STORY, EMAIL, CODE) VALUES('테스트용', 'test@naver.com', 5);
INSERT INTO POST(STORY, EMAIL, CODE) VALUES('테스트용', 'test@naver.com', 6);
INSERT INTO POST(STORY, EMAIL, CODE) VALUES('테스트용', 'test@naver.com', 7);
INSERT INTO COMMENT(CODE, CONTENT, WRITER_EMAIL, POST_CODE) VALUES(1, '저도 오늘 봤어요!ㅠ 다음에는 더 잘 볼 거예요!', 'test@naver.com', 1);
INSERT INTO COMMENT(CODE, CONTENT, WRITER_EMAIL, POST_CODE) VALUES(2, '힘내요 :)', 'test@naver.com', 1);
INSERT INTO TAG(CODE, [NAME], POST_CODE) VALUES(1, '#GREEN', 21);
INSERT INTO TAG(CODE, [NAME], POST_CODE) VALUES(2, '#TOEIC', 21);
INSERT INTO TAG(CODE, [NAME], POST_CODE) VALUES(3, '#운동장', 21);
INSERT INTO TAG(CODE, [NAME], POST_CODE) VALUES(4, '#망했', 21);
INSERT INTO TAG(CODE, [NAME], POST_CODE) VALUES(5, '#초록색', 21);
INSERT INTO TAG(CODE, [NAME], POST_CODE) VALUES(6, '#상큼해', 21);
INSERT INTO TAG(CODE, [NAME], POST_CODE) VALUES(7, '#히히', 22);
INSERT INTO TAG(CODE, [NAME], POST_CODE) VALUES(8, '#히히히히', 22);
INSERT INTO TAG(CODE, [NAME], POST_CODE) VALUES(9, '#하하하', 22);
INSERT INTO TAG(CODE, [NAME], POST_CODE) VALUES(10, '#호호', 22);
INSERT INTO TAG(CODE, [NAME], POST_CODE) VALUES(11, '#ㅎㅎ', 22);
INSERT INTO TAG(CODE, [NAME], POST_CODE) VALUES(12, '#ㅎ', 22);
INSERT INTO TAG(CODE, [NAME], POST_CODE) VALUES(13, '#헤헤', 22);

INSERT INTO [LIKE](CODE, USER_EMAIL, IS_LIKE, POST_CODE) VALUES(1, 'test@naver.com', 1, 1);
INSERT INTO [LIKE](CODE, USER_EMAIL, IS_LIKE, POST_CODE) VALUES(3, 'delete@naver.com', 1, 1);
INSERT INTO [LIKE](CODE, USER_EMAIL, IS_LIKE, POST_CODE) VALUES(2, 'delete@naver.com', 1, 2);

INSERT INTO [USER] (CELLPHONE, EMAIL, PW, GENDER) VALUES('010-1111-1111', '12df@naver.com', 'adsf', 'df')

INSERT INTO [ADMIN](CODE, EMAIL) VALUES(7, 'leejh872@naver.com');

--USER COMMENT VIEW
CREATE VIEW USER_COMMENT_VIEW AS
SELECT U.GENDER, C.CODE, C.CONTENT, C.WRITER_EMAIL, C.POST_CODE, C.REGDATE
FROM [USER] U RIGHT OUTER JOIN COMMENT C
ON U.EMAIL = C.WRITER_EMAIL;

--POST COMMENT VIEW
--POST(주인공), LIKE : POST에 따른 LIKE수를 집계하기 임시 테이블
--POST에 따른 LIKE수를 집계하기 위한 OUTER JOIN
CREATE VIEW POST_LIKE_VIEW AS
(SELECT CODE, pl.POST_CODE, USER_EMAIL, IS_LIKE, POST_LIKE
FROM 
(SELECT l.CODE, POST_CODE, USER_EMAIL, IS_LIKE FROM [POST] p RIGHT OUTER JOIN [LIKE] l ON p.CODE = l.POST_CODE) pl LEFT OUTER JOIN
(SELECT POST_CODE, SUM(IS_LIKE) [POST_LIKE] FROM [LIKE] GROUP BY POST_CODE) nl 
ON pl.POST_CODE = nl.POST_CODE)

--USER LIST VIEW
CREATE VIEW USER_LIST_VIEW AS
SELECT UL.*, R.[DEFAULT] ROLEDNAME FROM (
SELECT U.EMAIL, U.CELLPHONE, U.PW, U.GENDER, U.REGDATE, U.[ENABLED], ISNULL(MAX(W.NUM), 0) WAR_NUM
FROM [USER] U LEFT OUTER JOIN (SELECT MAX(NUM) NUM, EMAIL FROM WARNING GROUP BY EMAIL) W
ON U.EMAIL = W.EMAIL
GROUP BY U.EMAIL, U.CELLPHONE, U.PW, U.GENDER, U.REGDATE, U.[ENABLED]
) UL LEFT OUTER JOIN (SELECT * FROM USERROLE UR LEFT OUTER JOIN ROLES RS ON UR.ROLENAME = RS.[NAME] WHERE DEFAULTROLE = 1) R
ON  UL.EMAIL = R.USERID;


--WHERE 절이 SELECT보다 먼저 실행하므로 서브쿼리로 BETWEEN 1 AND 10
--서브쿼리는 반드시 별칭을 줘야함
SELECT * FROM 
(
SELECT ROW_NUMBER() OVER (ORDER BY REGDATE DESC) NUM, USER_COMMENT_VIEW.* 
	FROM USER_COMMENT_VIEW
	WHERE POST_CODE = 1
) C WHERE NUM BETWEEN 1 AND 10;


SELECT * FROM
		(
		SELECT ROW_NUMBER() OVER (ORDER BY REGDATE DESC) NUM, USER_COMMENT_VIEW.*
		FROM USER_COMMENT_VIEW
		WHERE POST_CODE = 
		) C

SELECT CODE, POST_CODE, USER_EMAIL, IS_LIKE, SUM(IS_LIKE) [POST_LIKE] FROM [LIKE] GROUP BY POST_CODE, CODE, USER_EMAIL, IS_LIKE;


(SELECT l.CODE, POST_CODE, USER_EMAIL, IS_LIKE FROM [POST] p RIGHT OUTER JOIN [LIKE] l ON p.CODE = l.POST_CODE);
(SELECT POST_CODE, SUM(IS_LIKE) [POST_LIKE] FROM [LIKE] GROUP BY POST_CODE);



SELECT *  FROM [POST] p LEFT OUTER JOIN (SELECT POST_CODE, SUM(IS_LIKE) [POST_LIKE] FROM [LIKE] GROUP BY POST_CODE) l ON p.CODE = l.POST_CODE ;

SELECT TB2.PHOTO 
FROM  POST TB1 JOIN  PHOTOFILE TB2
 ON  TB1.CODE = TB2.POST_CODE
ORDER BY TB2.REGDATE DESC

SELECT CONVERT(INT, ISNULL(MAX(CAST(CODE AS INT)),0)+1) AS CODE FROM POST

SELECT DISTINCT POST_LIKE FROM POST_LIKE_VIEW WHERE POST_CODE = 1;
SELECT * FROM POST_LIKE_VIEW;

SELECT DISTINCT CONVERT(INT, POST_LIKE) POST_LIKE FROM POST_LIKE_VIEW WHERE POST_CODE = 1; 
DELETE COMMENT WHERE CODE =8 AND WRITER_EMAIL = 'test@naver.com';

DELETE POST WHERE CODE = 3 AND EMAIL = 'test@naver.com'



insert into tag values('8','#초록색','2')
insert into tag values('8','#상큼','2')

select * from post
select * from tag
select * from photofile

select * from [like]

insert into [like] values(1,1,'test@naver.com',1);

select * from tag where post_code='1'

select * from [user]

select * from tag t inner join photofile p  on t.post_code = p.post_code where t.name='#상큼해'

select * from tag t inner join PHOTOFILE p  on t.post_code = p.post_code where t.name='#초록색'


insert into [like] values(1,1,'test@naver.com',1);


